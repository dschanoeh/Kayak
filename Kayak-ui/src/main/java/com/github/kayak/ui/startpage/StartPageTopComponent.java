/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.kayak.ui.startpage;

import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.github.kayak.ui.startpage//StartPage//EN",
autostore = false)
public final class StartPageTopComponent extends TopComponent {

    private static StartPageTopComponent instance;
    private static boolean showOnStartup;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "StartPageTopComponent";

    public StartPageTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(StartPageTopComponent.class, "CTL_StartPageTopComponent"));
        setToolTipText(NbBundle.getMessage(StartPageTopComponent.class, "HINT_StartPageTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout(20, 20));

        jScrollPane2.setBorder(null);

        jTextPane1.setBorder(null);
        jTextPane1.setContentType(org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, "StartPageTopComponent.jTextPane1.contentType")); // NOI18N
        jTextPane1.setEditable(false);
        jTextPane1.setFont(jTextPane1.getFont().deriveFont(jTextPane1.getFont().getStyle() | java.awt.Font.BOLD, jTextPane1.getFont().getSize()+2));
        jTextPane1.setText(org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, "StartPageTopComponent.jTextPane1.text")); // NOI18N
        jScrollPane2.setViewportView(jTextPane1);

        add(jScrollPane2, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, "StartPageTopComponent.jCheckBox1.text")); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        add(jCheckBox1, java.awt.BorderLayout.PAGE_END);

        jScrollPane3.setBorder(null);

        jTextPane3.setBorder(null);
        jTextPane3.setEditable(false);
        jTextPane3.setText(org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, "StartPageTopComponent.jTextPane3.text")); // NOI18N
        jTextPane3.setPreferredSize(new java.awt.Dimension(200, 25));
        jScrollPane3.setViewportView(jTextPane3);

        add(jScrollPane3, java.awt.BorderLayout.LINE_START);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1012, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jScrollPane1.setBorder(null);

        jTextPane2.setBorder(null);
        jTextPane2.setEditable(false);
        jTextPane2.setFont(jTextPane2.getFont());
        jTextPane2.setText(org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, "StartPageTopComponent.jTextPane2.text")); // NOI18N
        jTextPane2.setPreferredSize(new java.awt.Dimension(200, 300));
        jScrollPane1.setViewportView(jTextPane2);

        jPanel2.add(jScrollPane1);

        add(jPanel2, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if(jCheckBox1.isSelected())
            showOnStartup = false;
        else
            showOnStartup = true;
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized StartPageTopComponent getDefault() {
        if (instance == null) {
            instance = new StartPageTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the StartPageTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized StartPageTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(StartPageTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof StartPageTopComponent) {
            return (StartPageTopComponent) win;
        }
        Logger.getLogger(StartPageTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        if(showOnStartup)
            return TopComponent.PERSISTENCE_ALWAYS;
        else
            return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        p.setProperty("show", Boolean.toString(showOnStartup));
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        showOnStartup = Boolean.parseBoolean(p.getProperty("show"));
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
